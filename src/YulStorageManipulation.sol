// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.21;

contract YulStorageManipulation {
    function getStor0() public view returns (uint256 result) {
        assembly {
            result := sload(0x00)
        }
    }

    function setStor0(uint256 newNumber) public {
        assembly {
            sstore(0x00, newNumber)
        }
    }

    function incrementStor0() public {
        assembly {
            sstore(0x00, add(sload(0x00), 1))
        }
    }

    function decrementStor0() public {
        assembly {
            /* EVM opcodes generated by compiler
            The use of the NOT and ADD opcodes together is a common pattern for performing subtraction by in the EVM,
            leveraging two's complement arithmetic.

            PUSH1(0x00) - Pushes the value 0x00 onto the stack. This will be used later for the SSTORE operation to specify the storage location
            NOT         - Bitwise negation of the top value on the stack. Since the top value is 0x00, the result is 0xFF (all bits set). 
                            This is the first step in computing -1 in two's complement arithmetic.
            PUSH1(0x00) - Pushes the value 0x00 onto the stack again. This will be used for the SLOAD operation to specify which
                            storage location to load from.
            SLOAD       - Loads the value from storage at position 0x00 and pushes it onto the stack.
            ADD         - Adds the top two values on the stack. Remember, the second value on the stack is the bitwise negation of
                            0x00 (which is 0xFF), representing -1 in two's complement. So, this effectively subtracts 1 from the value loaded from storage.
            PUSH1(0x00) - Pushes the value 0x00 onto the stack again, specifying the storage location for the upcoming SSTORE operation.
            SSTORE - Stores the top value of the stack (the result of the subtraction) into storage at position 0x00
            */
            sstore(0x00, sub(sload(0x00), 1))
        }
    }
}
